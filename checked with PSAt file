#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>

// Wi-Fi Credentials
const char* ssid = "Your_SSID";
const char* password = "Your_PASSWORD";

// MQTT Broker Details
const char* mqtt_server = "dc03hub.saint-gobain-glass.com";  // Broker hostname
const int mqtt_port = 8883;  // Secure MQTT Port

// SSL/TLS Certificate (If required by the broker)
const char* root_ca = R"EOF(
-----BEGIN CERTIFICATE-----
YOUR_CA_CERTIFICATE_HERE
-----END CERTIFICATE-----
)EOF";

// Initialize WiFi and MQTT clients
WiFiClientSecure espClient;
PubSubClient client(espClient);

// Function to connect to Wi-Fi
void setup_wifi() {
    delay(10);
    Serial.println("Connecting to Wi-Fi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\nWi-Fi connected!");
}

// Function to connect to MQTT Broker
void connect_mqtt() {
    Serial.println("Connecting to MQTT...");
    
    espClient.setCACert(root_ca);  // Set the SSL certificate

    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (client.connect("ESP32Client")) {
            Serial.println("Connected!");
            client.subscribe("your/topic");  // Subscribe to a topic
        } else {
            Serial.print("Failed, rc=");
            Serial.print(client.state());
            Serial.println(" Trying again in 5 seconds...");
            delay(5000);
        }
    }
}

// Function to handle received MQTT messages
void callback(char* topic, byte* payload, unsigned int length) {
    Serial.print("Message received on topic: ");
    Serial.println(topic);
    Serial.print("Message: ");
    for (int i = 0; i < length; i++) {
        Serial.print((char)payload[i]);
    }
    Serial.println();
}

void setup() {
    Serial.begin(115200);
    setup_wifi();  // Connect to Wi-Fi

    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(callback);
    
    connect_mqtt();  // Connect to MQTT broker
}

void loop() {
    if (!client.connected()) {
        connect_mqtt();
    }
    client.loop();  // Maintain MQTT connection
}
